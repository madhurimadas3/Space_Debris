% clear everything
clc; clear; close all;

% Running "Space_debris_step1.m" first to get the data
%run('Space_debris_step1');
% Save the variables into a .mat file
save('orbit_data.mat', 'semi_major_axes', 'eccentricities', 'RAANs', 'argPerigees', 'inclinations', 'colors', 'tle_files');

% Create Figure for Animation
figure; hold on; grid on;
xlabel('X (km)'); ylabel('Y (km)'); zlabel('Z (km)');
title('Animated Space Debris Orbits');
axis equal;
view(3); % 3D view
rotate3d on;

% Plot Earth
[xs, ys, zs] = sphere(50); 
earth = surf(xs * 6371, ys * 6371, zs * 6371, ...
             'FaceAlpha', 0.5, 'EdgeColor', 'none'); 
colormap winter;

% Initialize plot objects
numFrames = 200; % Number of animation frames
hTrajectories = gobjects(length(tle_files),1);
hMarkers = gobjects(length(tle_files),1);

for idx = 1:length(tle_files)
    % Compute orbit points
    theta = linspace(0, 2*pi, numFrames);
    r = (semi_major_axis * (1 - eccentricity^2)) ./ (1 + eccentricity * cos(theta));
    x = r .* (cos(RAAN) .* cos(theta + argPerigee) - sin(RAAN) .* sin(theta + argPerigee) .* cos(i));
    y = r .* (sin(RAAN) .* cos(theta + argPerigee) + cos(RAAN) .* sin(theta + argPerigee) .* cos(i));
    z = r .* (sin(theta + argPerigee) .* sin(i));

    % Plot static orbit
    hTrajectories(idx) = plot3(x, y, z, colors{idx}, 'LineWidth', 1);
    
    % Initialize moving debris marker
    hMarkers(idx) = plot3(x(1), y(1), z(1), 'o', 'MarkerFaceColor', colors{idx}, 'MarkerEdgeColor', 'k', 'MarkerSize', 6);
end

% Animation Loop
for t = 1:numFrames
    for idx = 1:length(tle_files)
        % Update marker position
        set(hMarkers(idx), 'XData', x(t), 'YData', y(t), 'ZData', z(t));
    end
    pause(0.05); % Adjust frame rate
    drawnow;
end
